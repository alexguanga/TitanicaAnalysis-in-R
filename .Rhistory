data.combined$Survived <- as.factor(data.combined$Survived)
data.combined$Pclass <- as.factor(data.combined$Pclass)
# Info. on the R data types
str(data.combined)
# Create table of all the possible variables and the amnt. to each variable
table(data.combined$Survived)
# Distribution among classes, third class has the most amnt ppl while the second class has the least amt of ppl
table(data.combined$Pclass)
# load up ggplot
library(ggplot2)
# Hypothesis - Rich people survived at a higher rate
train$Pclass <- as.factor(train$Pclass)
ggplot(train, aes(x=Pclass, fill=factor(Survived))) +
geom_bar(width=5) +
xlab("PClass") +
ylab("Total Count") +
labs(fill="Survived")
# Load raw data
test <- read.csv("test.csv", header=TRUE)
train <- read.csv("train.csv", header=TRUE)
# Add a survived variable to the test data set to allow for combinbing data sets
# The data.frame is an objecte like Python
# 'rep' means to replicate the string "None" for 'nrow' times (which is the total # of times in test)
# Lastly, we do this for all the rows and column in the test data set
test.survived <- data.frame(Survived = rep("None", nrow(test)), test[,])
# Combine data sets
data.combined <- rbind(train, test.survived)
# factors is a data type that structures it in categorize
data.combined$Survived <- as.factor(data.combined$Survived)
data.combined$Pclass <- as.factor(data.combined$Pclass)
# Info. on the R data types
str(data.combined)
# Create table of all the possible variables and the amnt. to each variable
table(data.combined$Survived)
# Distribution among classes, third class has the most amnt ppl while the second class has the least amt of ppl
table(data.combined$Pclass)
# load up ggplot
library(ggplot2)
# Hypothesis - Rich people survived at a higher rate
train$Pclass <- as.factor(train$Pclass)
ggplot(train, aes(x=Pclass, fill=factor(Survived))) +
geom_bar(width=5) +
xlab("PClass") +
ylab("Total Count") +
labs(fill="Survived")
test.survived <- data.frame(Survived = rep("None", nrow(test)), test[,])
ggplot(train, aes(x=Pclass, fill=factor(Survived))) +
geom_bar(width=5) +
xlab("PClass") +
ylab("Total Count") +
labs(fill="Survived")
test <- read.csv("test.csv", header=TRUE)
train <- read.csv("train.csv", header=TRUE)
setwd("~/All_Projects/Data_Science/R_Studio")
ggplot(train, aes(x=Pclass, fill=factor(Survived))) +
geom_bar(width=5) +
xlab("PClass") +
ylab("Total Count") +
labs(fill="Survived")
test <- read.csv("test.csv", header=TRUE)
train <- read.csv("train.csv", header=TRUE)
# Load raw data
test <- read.csv("test.csv", header=TRUE)
train <- read.csv("train.csv", header=TRUE)
# Add a survived variable to the test data set to allow for combinbing data sets
# The data.frame is an objecte like Python
# 'rep' means to replicate the string "None" for 'nrow' times (which is the total # of times in test)
# Lastly, we do this for all the rows and column in the test data set
test.survived <- data.frame(Survived = rep("None", nrow(test)), test[,])
# Combine data sets
data.combined <- rbind(train, test.survived)
# factors is a data type that structures it in categorize
data.combined$Survived <- as.factor(data.combined$Survived)
data.combined$Pclass <- as.factor(data.combined$Pclass)
# Info. on the R data types
str(data.combined)
# Create table of all the possible variables and the amnt. to each variable
table(data.combined$Survived)
# Distribution among classes, third class has the most amnt ppl while the second class has the least amt of ppl
table(data.combined$Pclass)
# load up ggplot
library(ggplot2)
# Hypothesis - Rich people survived at a higher rate
train$Pclass <- as.factor(train$Pclass)
ggplot(train, aes(x=Pclass, fill=factor(Survived))) +
geom_bar(width=5) +
xlab("PClass") +
ylab("Total Count") +
labs(fill="Survived")
ggplot(train, aes(x=Pclass, fill=factor(Survived))) +
geom_bar(width=0.5) +
xlab("PClass") +
ylab("Total Count") +
labs(fill="Survived")
?head
train$Name <- as.character(train$Name)
head(train$Name)
length(unique((data.combined$Name)))
data.combined$Name <- as.character(data.combined$Name)
length(unique(data.combined$Name))
data.combined$Name <- as.character(data.combined$Name)
length(unique(data.combined$Name))
str(data.combined$Name)
str(data.combined)
dup.names <- as.character(data.combined[which(duplicated(as.character(data.combined$Name))), "Name"])
print(dup.names)
print(dup)
dup <- as.character(data.combined[which(duplicated(as.character(data.combined$Name))), "Name"])
print(dup)
data.combined[which(data.combined$Name %in% dup.names),]
data.combined[which(data.combined$Name %in% dup.names),]
# Cool string manipulation
library(stringr)
# Like 'Miss.', load up all the strings that have the word "Miss. " in it
misses <- data.combined[which(str_detect(data.combined$Name, "Miss. ")),]
# Format [row, column]
misses[1:5,]
# Cool string manipulation
library(stringr)
# Like 'Miss.', load up all the strings that have the word "Miss. " in it
misses <- data.combined[which(str_detect(data.combined$Name, "Miss. ")),]
# Format [row, column]
misses[1:5,]
# Like 'Miss.', load up all the strings that have the word "Miss. " in it
misses <- data.combined[which(str_detect(data.combined$Name, "Miss. ")),]
# Format [row, column]
misses[1:5,1:7]
mrses <- data.combined[which(str_detect(data.combined$Name, "Mrs. ")),]
mrses[1:5, 1:7]
males <- data.combined[which(train$Sex == "male"),]
males[1:5, 1:7]
dup.names <- as.character(data.combined[which(duplicated(as.character(data.combined$Name))), "Name"])
print(dup.names)
hello <- as.character(data.combined[which(duplicated(as.character(data.combined$Name))), "Name"])
print(hello)
?c
matrix(1:19)
matrix(1:19,2)
matrix(1:10, 2)
matrix(1:10, 3)
extractTitle <- function(name) {
name <- as.character(name)
if (length(grep("Miss. ", name)) > 0){
return ("Miss.")
} else if (length(grep("Master.")) > 0){
return ("Master.")
} else if (length(grep("Mrs.")) > 0){
return ("Mrs.")
} else if (length(grep("Mr.")) > 0){
return ("Mr.")
} else {
return ("Other")
}
}
titles <- NULL # An empty variable
for (i in 1:nrow(data.combined)) {
titles <- c(titles, extractTitle(data.combined[i, "Name"]))
}
print(titles[0:10,])
extractTitle <- function(name) {
name <- as.character(name)
if (length(grep("Miss. ", name)) > 0){
return ("Miss.")
} else if (length(grep("Master.", name)) > 0){
return ("Master.")
} else if (length(grep("Mrs.", name)) > 0){
return ("Mrs.")
} else if (length(grep("Mr.", name)) > 0){
return ("Mr.")
} else {
return ("Other")
}
}
titles <- NULL # An empty variable
for (i in 1:nrow(data.combined)) {
titles <- c(titles, extractTitle(data.combined[i, "Name"]))
}
print(titles[0:10,])
extractTitle <- function(name) {
name <- as.character(name)
if (length(grep("Miss. ", name)) > 0){
return ("Miss.")
} else if (length(grep("Master.", name)) > 0){
return ("Master.")
} else if (length(grep("Mrs.", name)) > 0){
return ("Mrs.")
} else if (length(grep("Mr.", name)) > 0){
return ("Mr.")
} else {
return ("Other")
}
}
titles <- NULL # An empty variable
for (i in 1:nrow(data.combined)) {
titles <- c(titles, extractTitle(data.combined[i, "Name"]))
}
print(titles)
print data.combined[1]
print (data.combined[1])
print (data.combined[1], "Name")
print (data.combined[1, "Name"])
print (data.combined["Name"])
?c
print (c(titles, data.combined[1, "Name"]))
c(1,7:9)
c(1:5, 10.5, "next")
View(test.survived)
View(data.combined)
data.combined$Title <- as.factors(titles)
# Load raw data
test <- read.csv("test.csv", header=TRUE)
train <- read.csv("train.csv", header=TRUE)
# Add a survived variable to the test data set to allow for combinbing data sets
# The data.frame is an objecte like Python
# 'rep' means to replicate the string "None" for 'nrow' times (which is the total # of times in test)
# Lastly, we do this for all the rows and column in the test data set
test.survived <- data.frame(Survived = rep("None", nrow(test)), test[,])
# Combine data sets
data.combined <- rbind(train, test.survived)
# factors is a data type that structures it in categorize
data.combined$Survived <- as.factor(data.combined$Survived)
data.combined$Pclass <- as.factor(data.combined$Pclass)
# Info. on the R data types
str(data.combined)
# Create table of all the possible variables and the amnt. to each variable
table(data.combined$Survived)
# Distribution among classes, third class has the most amnt ppl while the second class has the least amt of ppl
table(data.combined$Pclass)
# load up ggplot
library(ggplot2)
# Hypothesis - Rich people survived at a higher rate
train$Pclass <- as.factor(train$Pclass)
# Train is the file, Pclass is the x-axis, color coordinate this on if they survived or not.
# Geom is the bar graph, the rest are labels
ggplot(train, aes(x=Pclass, fill=factor(Survived))) +
geom_bar(width=0.5) +
xlab("PClass") +
ylab("Total Count") +
labs(fill="Survived")
# Changing names from factors to strings
train$Name <- as.character(train$Name)
# Only get the info. for the first rows
head(train$Name)
# Unique names, but it seems there are some duplicates. There are 1307 names but 1309 observations
data.combined$Name <- as.character(data.combined$Name)
length(unique(data.combined$Name))
# Finding the issue with the duplicate values
# The which is like a 'WHERE' clause in SQL, we only get the data that are duplicates in the Name column
dup.names <- as.character(data.combined[which(duplicated(as.character(data.combined$Name))), "Name"])
print(dup.names)
# Look at the data from these duplicates values
# Layman: From the data.combined, I only want the values which are in dup.names
data.combined[which(data.combined$Name %in% dup.names),]
# Cool string manipulation
library(stringr)
# Like 'Miss.', load up all the strings that have the word "Miss. " in it
misses <- data.combined[which(str_detect(data.combined$Name, "Miss. ")),]
# Format [row, column]. INDEXES START AT 1 not 0!
misses[1:5,1:7]
# Using 'Mrs.' now
mrses <- data.combined[which(str_detect(data.combined$Name, "Mrs. ")),]
mrses[1:5, 1:7]
# Check males to see if any patters
males <- data.combined[which(train$Sex == "male"),]
males[1:5, 1:7]
# Expand relationship btw survival and pclass by adding new variable 'Title'
extractTitle <- function(name) {
name <- as.character(name)
if (length(grep("Miss. ", name)) > 0){
return ("Miss.")
} else if (length(grep("Master.", name)) > 0){
return ("Master.")
} else if (length(grep("Mrs.", name)) > 0){
return ("Mrs.")
} else if (length(grep("Mr.", name)) > 0){
return ("Mr.")
} else {
return ("Other")
}
}
titles <- NULL # An empty variable
# The i is the row, and the name is the column
for (i in 1:nrow(data.combined)) {
titles <- c(titles, extractTitle(data.combined[i, "Name"]))
}
data.combined$Title <- as.factor(titles)
View(data.combined)
View(test)
ggplot(data.combined[1:891,], aes(x=Title, fill=factor(Survived))) +
geom_bar(binwidth=0.5) +
facet_wrap(~Pclass) +
ggtitle("Pclass") +
xlab("Title") +
ylab("Total Count") +
labs(fill="Survived")
ggplot(data.combined[1:891,], aes(x=Title, fill=factor(Survived))) +
geom_bar(width=0.5) +
facet_wrap(~Pclass) +
ggtitle("Pclass") +
xlab("Title") +
ylab("Total Count") +
labs(fill="Survived")
ggplot(data.combined[1:891,], aes(x=Title, fill=factor(Survived))) +
geom_bar(width=0.5) +
facet_wrap(Pclass) +
ggtitle("Pclass") +
xlab("Title") +
ylab("Total Count") +
labs(fill="Survived")
?facet_wrap
ggplot(data.combined[1:891,], aes(x=Title, fill=factor(Survived))) +
geom_bar(width=0.5) +
facet_wrap(c(Pclass)) +
ggtitle("Pclass") +
xlab("Title") +
ylab("Total Count") +
labs(fill="Survived")
ggplot(data.combined[1:891,], aes(x=Title, fill=factor(Survived))) +
geom_bar(width=0.5) +
facet_wrap(~Pclass) +
ggtitle("Pclass") +
xlab("Title") +
ylab("Total Count") +
labs(fill="Survived")
ggplot(data.combined[1:891,], aes(x=Title, fill=factor(Survived))) +
geom_bar(width=0.5) +
ggtitle("Pclass") +
xlab("Title") +
ylab("Total Count") +
labs(fill="Survived")
if (length(grep("Miss. ", name)) > 0){
return ("Miss.")
} else if (length(grep("Master.", name)) > 0){
return ("Master.")
} else if (length(grep("Mrs.", name)) > 0){
return ("Mrs.")
} else if (length(grep("Mr.", name)) > 0){
return ("Mr.")
} else {
return ("Other")
}
ggplot(data.combined[1:891,], aes(x=Title, fill=(Survived))) +
geom_bar(width=0.5) +
facet_wrap(~Pclass) +
ggtitle("Pclass") +
xlab("Title") +
ylab("Total Count") +
labs(fill="Survived")
ggplot(data.combined[1:891,], aes(x=Title, fill=factor(Survived))) +
geom_bar(width=0.5) +
facet_wrap(~Pclass) +
ggtitle("Pclass") +
xlab("Title") +
ylab("Total Count") +
labs(fill="Survived")
ggplot(data.combined[1:891,], aes(x=Title, fill=factor(Survived))) +
geom_bar(width=0.5) +
facet_wrap(~Pclass) +
ggtitle("Pclass") +
xlab("Title") +
ylab("Total Count") +
labs(fill="Survived")
# Load raw data
test <- read.csv("test.csv", header=TRUE)
train <- read.csv("train.csv", header=TRUE)
# Add a survived variable to the test data set to allow for combinbing data sets
# The data.frame is an objecte like Python
# 'rep' means to replicate the string "None" for 'nrow' times (which is the total # of times in test)
# Lastly, we do this for all the rows and column in the test data set
test.survived <- data.frame(Survived = rep("None", nrow(test)), test[,])
# Combine data sets
data.combined <- rbind(train, test.survived)
# factors is a data type that structures it in categorize
data.combined$Survived <- as.factor(data.combined$Survived)
data.combined$Pclass <- as.factor(data.combined$Pclass)
# Info. on the R data types
str(data.combined)
# Create table of all the possible variables and the amnt. to each variable
table(data.combined$Survived)
# Distribution among classes, third class has the most amnt ppl while the second class has the least amt of ppl
table(data.combined$Pclass)
# load up ggplot
library(ggplot2)
# Hypothesis - Rich people survived at a higher rate
train$Pclass <- as.factor(train$Pclass)
# Train is the file, Pclass is the x-axis, color coordinate this on if they survived or not.
# Geom is the bar graph, the rest are labels
ggplot(train, aes(x=Pclass, fill=factor(Survived))) +
geom_bar(width=0.5) +
xlab("PClass") +
ylab("Total Count") +
labs(fill="Survived")
# Changing names from factors to strings
train$Name <- as.character(train$Name)
# Only get the info. for the first rows
head(train$Name)
# Unique names, but it seems there are some duplicates. There are 1307 names but 1309 observations
data.combined$Name <- as.character(data.combined$Name)
length(unique(data.combined$Name))
# Finding the issue with the duplicate values
# The which is like a 'WHERE' clause in SQL, we only get the data that are duplicates in the Name column
dup.names <- as.character(data.combined[which(duplicated(as.character(data.combined$Name))), "Name"])
print(dup.names)
# Look at the data from these duplicates values
# Layman: From the data.combined, I only want the values which are in dup.names
data.combined[which(data.combined$Name %in% dup.names),]
# Cool string manipulation
library(stringr)
# Like 'Miss.', load up all the strings that have the word "Miss. " in it
misses <- data.combined[which(str_detect(data.combined$Name, "Miss. ")),]
# Format [row, column]. INDEXES START AT 1 not 0!
misses[1:5,1:7]
# Using 'Mrs.' now
mrses <- data.combined[which(str_detect(data.combined$Name, "Mrs. ")),]
mrses[1:5, 1:7]
# Check males to see if any patters
males <- data.combined[which(train$Sex == "male"),]
males[1:5, 1:7]
# Expand relationship btw survival and pclass by adding new variable 'Title'
extractTitle <- function(name) {
name <- as.character(name)
if (length(grep("Miss. ", name)) > 0){
return ("Miss.")
} else if (length(grep("Master.", name)) > 0){
return ("Master.")
} else if (length(grep("Mrs.", name)) > 0){
return ("Mrs.")
} else if (length(grep("Mr.", name)) > 0){
return ("Mr.")
} else {
return ("Other")
}
}
titles <- NULL # An empty variable
# The i is the row, and the name is the column
for (i in 1:nrow(data.combined)) {
titles <- c(titles, extractTitle(data.combined[i, "Name"]))
}
data.combined$Title <- as.factor(titles)
# We only want info for survived in the train set, must only use that
# The test dataset is used so we can try to test our result with that dataset
ggplot(data.combined[1:891,], aes(x=Title, fill=factor(Survived))) +
geom_bar(width=0.5) +
facet_wrap(~Pclass) +
ggtitle("Pclass") +
xlab("Title") +
ylab("Total Count") +
labs(fill="Survived")
ggplot(data.combined[1:891,], aes(x=Title, fill=factor(Survived))) +
geom_bar(width=0.5) +
facet_wrap(~Pclass) +
ggtitle("Pclass") +
xlab("Title") +
ylab("Total Count") +
labs(fill="Survived")
# Expand relationship btw survival and pclass by adding new variable 'Title'
extractTitle <- function(name) {
name <- as.character(name)
if (length(grep("Miss. ", name)) > 0){
return ("Miss.")
} else if (length(grep("Master.", name)) > 0){
return ("Master.")
} else if (length(grep("Mrs.", name)) > 0){
return ("Mrs.")
} else if (length(grep("Mr.", name)) > 0){
return ("Mr.")
} else {
return ("Other")
}
}
titles <- NULL # An empty variable
# The i is the row, and the name is the column
for (i in 1:nrow(data.combined)) {
titles <- c(titles, extractTitle(data.combined[i, "Name"]))
}
data.combined$Title <- as.factor(titles)
# We only want info for survived in the train set, must only use that
# The test dataset is used so we can try to test our result with that dataset
ggplot(data.combined[1:891,], aes(x=Title, fill=factor(Survived))) +
geom_bar(width=0.5) +
facet_wrap(~Pclass) +
ggtitle("Pclass") +
xlab("Title") +
ylab("Total Count") +
labs(fill="Survived")
ggplot(data.combined[1:891,], aes(x=Title, fill=factor(Survived))) +
geom_bar(width=0.5) +
ggtitle("Pclass") +
xlab("Title") +
ylab("Total Count") +
labs(fill="Survived")
ggplot(data.combined[1:891,], aes(x=Title, fill=factor(Survived))) +
geom_bar(width=0.5) +
facet_wrap(~Pclass) +
ggtitle("Pclass") +
xlab("Title") +
ylab("Total Count") +
labs(fill="Survived")
ggplot(data.combined[1:891,], aes(x=Title, fill=factor(Survived))) +
geom_bar(width=0.5) +
facet_wrap(~Pclass) +
ggtitle("Pclass") +
xlab("Title") +
ylab("Total Count") +
labs(fill="Survived")
ggplot(data.combined[1:891,], aes(x=Title, fill=factor(Survived))) +
geom_bar(width=0.5) +
facet_wrap(~Pclass) +
ggtitle("Pclass") +
xlab("Title") +
ylab("Total Count") +
labs(fill="Survived")
